LIBRARY ieee  ; 
library std;
USE ieee.NUMERIC_STD.all  ; 
USE ieee.std_logic_1164.all  ; 
USE ieee.STD_LOGIC_SIGNED.all  ; 
use std.textio.ALL;


ENTITY addroundkey_tb  IS 
END ; 
 
ARCHITECTURE addroundkey_tb_arch OF addroundkey_tb IS
  
  file file_in : text;
  file file_RESULTS : text;
  
  SIGNAL addroundkey_out   :  std_logic_vector (127 downto 0)  ; 
  SIGNAL Key   :  std_logic_vector (127 downto 0)  ; 
  SIGNAL Plaintext   :  std_logic_vector (127 downto 0)  ; 
  COMPONENT addroundkey  
    PORT ( 
      addroundkey_out  : out std_logic_vector (127 downto 0) ; 
      Key  : in std_logic_vector (127 downto 0) ; 
      Plaintext  : in std_logic_vector (127 downto 0) ); 
  END COMPONENT ; 
BEGIN
  DUT  : addroundkey  
    PORT MAP ( 
      addroundkey_out   => addroundkey_out  ,
      Key   => Key  ,
      Plaintext   => Plaintext   ) ; 
      
process
  variable L,M	: LINE;
  file Ptext	 : TEXT is in	"plaintext.txt"; 		--our plaintext file
  file Ktext	 : TEXT is in	"key.txt"; 		--our plaintext file
  file RES	 : TEXT is out	"output_results.txt"; 
  variable P,K,R	: BIT_VECTOR(127 downto 0); 
 
begin
	wait for 10 ns;
	READLINE(Ptext, L);
	READ(L,P);
	Plaintext 		<= To_StdLogicVector(P) after 2 ns;
	wait for 10 ns; 
	READLINE(Ktext, L);
	READ(L,K);
	Key 		<= To_StdLogicVector(K) after 2 ns;
	
  wait for 10 ns; 
	WRITE(M,to_bitvector(addroundkey_out),LEFT, 128);
	WRITELINE(RES, M);
	
	file_close(Ptext);
	file_close(Ktext);
  file_close(RES);
	
end process;


END ; 

